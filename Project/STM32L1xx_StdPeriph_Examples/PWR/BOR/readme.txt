/**
  @page PWR_BOR PWR Brown Out Reset (BOR) example
  
  @verbatim
  ******************** (C) COPYRIGHT 2012 STMicroelectronics *******************
  * @file    PWR/BOR/readme.txt 
  * @author  MCD Application Team
  * @version V1.1.1
  * @date    13-April-2012
  * @brief   Description of the PWR Brown Out Reset (BOR) example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example shows how to configure the programmable BOR thresholds using the 
FLASH option bytes.

- Configure the BOR threshold: 
To modify the BOR threshold, uncomment the line "#define BOR_MODIFY" and select
the voltage range using the the line "#define BOR_LEVEL" in main.c file. 

To load the new option byte values, a system Reset is necessary, for this, the
function FLASH_OB_Launch() is used.

A LED connected to a specific GPIO pin is toggling to indicate that the reset
is released and the system is in RUN mode otherwise the BOR is mainting the 
reset.


@par Directory contents 

  - PWR/BOR/stm32l1xx_conf.h    Library Configuration file
  - PWR/BOR/stm32l1xx_it.c      Interrupt handlers
  - PWR/BOR/stm32l1xx_it.h      Interrupt handlers header file
  - PWR/BOR/main.c              Main program
  - PWR/BOR/system_stm32l1xx.c  STM32L1xx system source file
  
@note The "system_stm32l1xx.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32L1xx_Clock_Configuration_V1.1.0.xls" 
      provided with the AN3309 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>
         
@par Hardware and Software environment

  - This example runs on STM32L1xx Ultra Low Power High-, Medium-Density and Medium-Density Plus Devices.
  
  - This example has been tested with STMicroelectronics STM32L152D-EVAL (STM32L1xx 
    Ultra Low Power High-Density) and STM32L152-EVAL (STM32L1xx Ultra Low 
    Power Medium-Density) evaluation board and can be easily tailored to any 
    other supported device and development board.

  - STM32L152-EVAL Set-up
    - Use Jumper 13 in position 1<->2 and adjust the VDD.
    - Use LED1 led connected to PD.00 pin

  - STM32L152D-EVAL Set-up
    - Use Jumper 5 in position 1<->2 and adjust the VDD.
    - Use LED1 led connected to PD.03 pin
      
@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32L1xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - Rebuild all files and load your image into target memory
 - Run the example

@note
- Ultra Low Power Medium-density devices are STM32L151xx and STM32L152xx 
  microcontrollers where the Flash memory density ranges between 64 and 128 Kbytes.
- Ultra Low Power Medium-density Plus devices are STM32L151xx, STM32L152xx and 
  STM32L162xx microcontrollers where the Flash memory density is 256 Kbytes.
- Ultra Low Power High-density devices are STM32L151xx, STM32L152xx and STM32L162xx 
  microcontrollers where the Flash memory density is 384 Kbytes.
    
 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */


