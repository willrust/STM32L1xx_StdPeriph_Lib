/**
  @page CortexM3_MPU CortexM3 MPU example
  
  @verbatim
  ******************** (C) COPYRIGHT 2012 STMicroelectronics *******************
  * @file    CortexM3/MPU/readme.txt 
  * @author  MCD Application Team
  * @version V1.1.1
  * @date    13-April-2012
  * @brief   Description of the CortexM3 MPU example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example presents the MPU features on STM32L1xx devices and it can be easily
ported to any other STM32 device supporting MPU.

The example purpose is to configure a memory region as privileged read only region
and tries to perform read and write operation in different mode.

If the access is permitted LED1 is toggling. If the access is not permitted, 
a memory management fault is generated and LED2 is ON.
To generate an MPU memory fault exception due to an access right error, uncomment
the following line "PrivilegedReadOnlyArray[0] = 'e';" in the "stm32_mpu.c" file.


@par Directory contents 

  - CortexM3/MPU/stm32l1xx_conf.h     Library Configuration file
  - CortexM3/MPU/stm32l1xx_it.c       Interrupt handlers
  - CortexM3/MPU/stm32l1xx_it.h       Header for stm32l1xx_it.c 
  - CortexM3/MPU/main.c               Main program
  - CortexM3/MPU/system_stm32l1xx.c   STM32L1xx system source file
  - CortexM3/MPU/stm32_mpu.c          Cortex-M3 MPU regions Access rights file
      
@note The "system_stm32l1xx.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32L1xx_Clock_Configuration_V1.1.0.xls" 
      provided with the AN3309 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>

@par Hardware and Software environment
  
  - This example runs on STM32L1xx Ultra Low Power High-, Medium-Density and Medium-Density Plus Devices.

  - This example has been tested with STMicroelectronics STM32L152D-EVAL (STM32L1xx 
    Ultra Low Power High-Density) and STM32L152-EVAL (STM32L1xx Ultra Low 
    Power Medium-Density) evaluation board and can be easily tailored to any 
    other supported device and development board.


@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32L1xx_StdPeriph_Templates
 - Open your preferred toolchain and setup your project configuration as follows
 - Add the required example files
   - stm32_mpu.c
<ul>
- For RIDE and TrueSTUDIO toolchains you have to follow these instructions

    <li> RIDE 
        - In the Application options -> script menu, set "Use Default Script File" 
          to "No" and use "stm32l1xx_flash_ROAarray.ld" as Script File. 
          This linker is configured for STM32L1xx. It should be updated to use it
          with other STM32 devices.      
 
    <li> TrueSTUDIO 
          - In the project properties window, select C/C++ Build->settings node 
            then the C Linker->General node and use "stm32l1xx_flash_ROAarray.ld" 
            as Script File.
            This linker is configured for STM32L1xx. It should be updated to use 
            it with other STM32 devices.         
</ul>    
 
 - Rebuild all files and load your image into target memory
 - Run the example

@note
- Ultra Low Power Medium-density devices are STM32L151xx and STM32L152xx 
  microcontrollers where the Flash memory density ranges between 64 and 128 Kbytes.
- Ultra Low Power Medium-density Plus devices are STM32L151xx, STM32L152xx and 
  STM32L162xx microcontrollers where the Flash memory density is 256 Kbytes.
- Ultra Low Power High-density devices are STM32L151xx, STM32L152xx and STM32L162xx 
  microcontrollers where the Flash memory density is 384 Kbytes.
    
 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */


