/**
  @page FLASH_HalfPage FLASH Half Page Program example
  
  @verbatim
  ******************** (C) COPYRIGHT 2012 STMicroelectronics *******************
  * @file    FLASH/HalfPage/readme.txt 
  * @author  MCD Application Team
  * @version V1.1.1
  * @date    13-April-2012
  * @brief   Description of the FLASH Half Page Program example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 

This example provides a description of how to program the STM32L1xx FLASH program
memory using half page write operation. 
On STM32L1xx Medium-density devices, the Halfpage operation is possible only from 
SRAM.
On STM32L1xx High-density devices, the Halfpage operation is possible only from 
SRAM, from FLASH Bank1 to Bank2 and vice versa.

After Reset, the Flash memory Program/Erase Controller is locked. To unlock it,
the FLASH_Unlock function is used.
Before programming the desired addresses, an erase operation is performed using 
the flash page erase feature. The erase procedure starts with the calculation of
the number of pages to be used. Then all these pages will be erased one by one by
calling FLASH_ErasePage function. 

Once this operation is finished, the programming operation will be performed by 
using the FLASH_ProgramHalfPage function. The written data is then checked and the
result of the programming operation is stored into the MemoryProgramStatus variable.

@par Directory contents 

  - FLASH/HalfPage/stm32l1xx_conf.h     Library Configuration file
  - FLASH/HalfPage/stm32l1xx_it.c       Interrupt handlers
  - FLASH/HalfPage/stm32l1xx_it.h       Header for stm32l1xx_it.c
  - FLASH/HalfPage/main.c               Main program
  - FLASH/HalfPage/system_stm32l1xx.c   STM32L1xx system source file
  
@note The "system_stm32l1xx.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32L1xx_Clock_Configuration_V1.1.0.xls" 
      provided with the AN3309 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>
         
@par Hardware and Software environment

  - This example runs on STM32L1xx Ultra Low Power High-, Medium-Density and Medium-Density Plus Devices.
  
  - This example has been tested with STMicroelectronics STM32L152D-EVAL (STM32L1xx 
    Ultra Low Power High-Density) and STM32L152-EVAL (STM32L1xx Ultra Low 
    Power Medium-Density) evaluation board and can be easily tailored to any 
    other supported device and development board.

@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32L1xx_StdPeriph_Templates
 - Open your preferred toolchain 
   
@note On STM32L1xx Medium-density devices, the stm32l1xx_flash_ramfunc.c file 
      should be placed in Internal SRAM.
      ARM Compiler
      ------------
      RAM functions are defined using the toolchain options. 
      Functions that are be executed in RAM should reside in a separate
      source module. Using the 'Options for File' dialog you can simply change
      the 'Code / Const' area of a module to a memory space in physical RAM.
      Available memory areas are declared in the 'Target' tab of the 
      'Options for Target' dialog.

 - Rebuild all files and load your image into target memory
 - Run the example

@note
- Ultra Low Power Medium-density devices are STM32L151xx and STM32L152xx 
  microcontrollers where the Flash memory density ranges between 64 and 128 Kbytes.
- Ultra Low Power Medium-density Plus devices are STM32L151xx, STM32L152xx and 
  STM32L162xx microcontrollers where the Flash memory density is 256 Kbytes.
- Ultra Low Power High-density devices are STM32L151xx, STM32L152xx and STM32L162xx 
  microcontrollers where the Flash memory density is 384 Kbytes.
   
 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */


