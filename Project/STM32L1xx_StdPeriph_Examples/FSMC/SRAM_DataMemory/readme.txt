/**
  @page FSMC_SRAM_DataMemory FSMC SRAM DataMemory example
  
  @verbatim
  ******************** (C) COPYRIGHT 2012 STMicroelectronics *******************
  * @file    FSMC/SRAM_DataMemory/readme.txt 
  * @author  MCD Application Team
  * @version V1.1.1
  * @date    13-April-2012
  * @brief   Description of the FSMC SRAM DataMemory example.
  ******************************************************************************
  *
  * Licensed under MCD-ST Liberty SW License Agreement V2, (the "License");
  * You may not use this file except in compliance with the License.
  * You may obtain a copy of the License at:
  *
  *        http://www.st.com/software_license_agreement_liberty_v2
  *
  * Unless required by applicable law or agreed to in writing, software 
  * distributed under the License is distributed on an "AS IS" BASIS, 
  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  * See the License for the specific language governing permissions and
  * limitations under the License.
  *
  ******************************************************************************
   @endverbatim

@par Example Description 
           
This example shows how to use the external SRAM mounted on STM32L152D-EVAL 
as program data memory (including heap and stack).
The example scenario doesn't reflect a real application case; its purpose is to
provide only the procedure to follow to use the external SRAM as data memory.

This example doesn't use the default library startup files, it uses startup files
provided within this folder.


@par Directory contents

  - FSMC/SRAM_DataMemory/system_stm32l1xx.c                STM32L1xx system clock configuration file 
  - FSMC/SRAM_DataMemory/stm32l1xx_conf.h                  Library Configuration file
  - FSMC/SRAM_DataMemory/stm32l1xx_it.c                    Interrupt handlers
  - FSMC/SRAM_DataMemory/stm32l1xx_it.h                    Header for stm32l1xx_it.c
  - FSMC/SRAM_DataMemory/main.c                            Main program
  - FSMC/SRAM_DataMemory/startup/*/startup_stm32l1xx_hd.s  Startup file

@note The "system_stm32l1xx.c" is generated by an automatic clock configuration 
      system and can be easily customized to your own configuration. 
      To select different clock setup, use the "STM32L1xx_Clock_Configuration_V1.1.0.xls" 
      provided with the AN3309 package available on <a href="http://www.st.com/internet/mcu/family/141.jsp">  ST Microcontrollers </a>

      
@par Hardware and Software environment 

  - This example runs on STM32L1xx Ultra Low Power High-Density Devices.
  
  - This example has been tested with STMicroelectronics STM32L152D-EVAL (STM32L1xx 
    Ultra Low Power High-Density) evaluation board and can be easily tailored 
    to any other supported device and development board.
     
@par How to use it ? 

In order to make the program work, you must do the following :
 - Copy all source files from this example folder to the template folder under
   Project\STM32L1xx_StdPeriph_Templates
 - Open your preferred toolchain 
 - Replace the default default library startup file with the one provided within this folder. 
 - Update your project settings as follows:
<ul>
 <li> MDK-ARM 
    - in Project->Options for Target window, select 'RAM1'and enter 0x68000000 
      as start address with size of 0x100000 (IRAM1 must be un-checked)
    - uncomment "#define DATA_IN_ExtSRAM " in the "system_stm32l1xx.c" file               

 <li> EWARM 
    - use "stm32l1xx_flash_extsram.icf" as linker file (under Project\STM32L1xx_StdPeriph_Templates\EWARM)
    - uncomment "#define DATA_IN_ExtSRAM " in the "system_stm32l1xx.c" file

 <li> RIDE 
    - In the Application options -> script menu, set "Use Default Script File" 
      to "No" and use "stm32l152d_extram.ld" as Script File.
    - uncomment "#define DATA_IN_ExtSRAM " in the "system_stm32f10x.c" file

<li> Tasking 
    - In the project workspace window, open the stm32lxx.lsl file.
    - From the memory window, select rom and enter and enter 0x68000000 
      as address with size of 1024k.
    - uncomment "#define DATA_IN_ExtSRAM " in the "system_stm32l1xx_hd.c" file

  
 <li> TrueSTUDIO 
    - In the project properties window, select 'C/C++ Build'->settings node then 
      the 'C Linker'->General node and use "stm32f10x_flash_extsram.ld" as Script File.
    - uncomment "#define DATA_IN_ExtSRAM " in the "system_stm32l1xx.c" file

     
</ul>
 - Rebuild all files and load your image into target memory
 - Run the example


@note
- Ultra Low Power Medium-density devices are STM32L151xx and STM32L152xx 
  microcontrollers where the Flash memory density ranges between 64 and 128 Kbytes.
- Ultra Low Power Medium-density Plus devices are STM32L151xx, STM32L152xx and 
  STM32L162xx microcontrollers where the Flash memory density is 256 Kbytes.
- Ultra Low Power High-density devices are STM32L151xx, STM32L152xx and STM32L162xx 
  microcontrollers where the Flash memory density is 384 Kbytes.

 * <h3><center>&copy; COPYRIGHT STMicroelectronics</center></h3>
 */


